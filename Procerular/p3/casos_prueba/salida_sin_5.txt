;D:	main
;D:	{
;D:	boolean
;R:	modificadores_acceso:  
;R:	tipo:	TOK_BOOLEAN 
;D:	x
;R:	clase_escalar:	tipo 
;R:	clase:	clase_escalar 
;D:	;
;R:	identificadores:	TOK_IDENTIFICADOR 
;R:	declaracion: modificadores_acceso  clase identificadores ';' 
;D:	int
;R:	modificadores_acceso:  
;R:	tipo:	TOK_INT 
;D:	y
;R:	clase_escalar:	tipo 
;R:	clase:	clase_escalar 
;D:	;
;R:	identificadores:	TOK_IDENTIFICADOR 
;R:	declaracion: modificadores_acceso  clase identificadores ';' 
;D:	scanf
;R:	declaraciones:	declaracion 
;R:	declaraciones:  declaracion declaraciones 
;R:	funciones:	
;D:	x
;D:	;
;R:	lectura:	TOK_SCANF TOK_IDENTIFICADOR 
;R:	sentencia_simple: lectura 
;R:	sentencia:	sentencia_simple ';' 
;D:	scanf
;D:	y
;D:	;
;R:	lectura:	TOK_SCANF TOK_IDENTIFICADOR 
;R:	sentencia_simple: lectura 
;R:	sentencia:	sentencia_simple ';' 
;D:	if
;D:	(
;D:	x
;D:	)
;R:	exp:	TOK_IDENTIFICADOR 
;D:	{
;D:	printf
;D:	y
;D:	;
;R:	exp:	TOK_IDENTIFICADOR 
;R:	escritura:	TOK_PRINTF exp 
;R:	sentencia_simple: escritura 
;R:	sentencia:	sentencia_simple ';' 
;D:	}
;R:	sentencias:	sentencia 
;D:	else
;D:	{
;D:	printf
;D:	-
;D:	y
;D:	;
;R:	exp:	TOK_IDENTIFICADOR 
;R:	exp:	'-' exp  
;R:	escritura:	TOK_PRINTF exp 
;R:	sentencia_simple: escritura 
;R:	sentencia:	sentencia_simple ';' 
;D:	}
;R:	sentencias:	sentencia 
;R:	condicional:  TOK_IF '(' exp ')' '{' sentencias '}' TOK_ELSE '{' sentencias '}' 
;R:	bloque:	condicional 
;R:	sentencia: bloque 
;D:	}
;R:	sentencias:	sentencia 
;R:	sentencias: sentencia  sentencias 
;R:	sentencias: sentencia  sentencias 
;R:	programa: TOK_MAIN '{' declaraciones funciones sentencias '}'
